{"version":3,"file":"static/js/134.b7606d2f.chunk.js","mappings":"8SAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAA,+BAEO,IAAMC,EAAgB,mCAAG,sGACPD,EAAAA,EAAAA,IAAA,sCACUD,EADV,YADO,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAMhBC,EAAc,mCAAG,WAAMC,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBK,EADrB,+CADK,uBACpBF,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAMdG,EAAiB,mCAAG,WAAMC,GAAN,yFACRN,EAAAA,EAAAA,IAAA,iBACXM,EADW,oBACGP,EADH,oBADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,sDAYjBK,EAAS,mCAAG,WAAMD,GAAN,yFACAN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACWP,EADX,oBADA,uBACfG,EADe,EACfA,KADe,kBAIhBA,GAJgB,2CAAH,sDAMTM,EAAW,mCAAG,WAAMF,GAAN,yFACFN,EAAAA,EAAAA,IAAA,iBACXM,EADW,4BACWP,EADX,2BADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,GAJkB,2CAAH,qD,mICuCxB,UArEe,WAAO,IAAD,EACnB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACMC,EAAW,UAAGJ,EAAaK,IAAI,iBAApB,QAAiC,GAC5CC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,8GAEuBlB,EAAAA,EAAAA,IAAec,GAFtC,OAEUf,EAFV,OAGIS,GAAU,OAAIT,EAAKoB,UAHvB,gDAKIC,QAAQC,IAAR,MALJ,0DALc,sBACTP,GADS,mCAadQ,EACD,GAAE,CAACR,IAmBJ,OACE,iCACE,kBAAMS,SAnBO,SAAAC,GACf,IAAKZ,EACH,OAAO,KAETY,EAAEC,iBACFd,EAA0B,KAAVC,EAAe,CAAEc,OAAQd,GAAU,CAAC,GACpDC,EAAS,GACV,EAYG,WACE,kBACEc,KAAK,OACLC,MAAOhB,EACPiB,KAAK,QACLC,SAAU,SAAAN,GAAC,OAfG,SAAAI,GAGpB,GAFAf,EAASe,IAEJrB,EACH,OAAO,IAEV,CASsBwB,CAAcP,EAAEQ,OAAOJ,MAAMK,cAAjC,KAEb,mBAAQN,KAAK,SAAb,uBAEDpB,EAAO2B,KAAI,YAAiC,IACvCC,EADSC,EAA6B,EAA7BA,YAAajC,EAAgB,EAAhBA,GAAIkC,EAAY,EAAZA,MAO9B,OAJEF,EADEC,EACI,yCAAqCA,GAElCE,GAGT,UAAC,EAAAC,KAAD,CAAeC,GAAE,UAAKrC,GAAMsC,MAAO,CAAEC,KAAM1B,GAA3C,WACE,gBAAK2B,IAAKR,EAAQS,MAAM,MAAMC,IAAKR,KACnC,wBAAKA,MAFIlC,EAKd,MAGN,C","sources":["api/fetchApi.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '414e626a6dd93e46a20c42c05170abc8';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport const fetchTrendingApi = async () => {\n  const { data } = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\nexport const fetchSearchApi = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return data;\n};\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\nexport const fetchMovieGenres = async () => {\n  const { data } = await axios.get(\n    `/genre/movie/list?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\nexport const fetchCast = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\nexport const fetchReview = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};","import { fetchSearchApi } from 'api/fetchApi';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport defImg from '../img/notPictyre.jpg';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setsearchParams] = useSearchParams();\n  const [input, setInput] = useState('');\n  const inputParams = searchParams.get('filter') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!inputParams) {\n      return;\n    }\n\n    async function fetch() {\n      try {\n        const data = await fetchSearchApi(inputParams);\n        setMovies([...data.results]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetch();\n  }, [inputParams]);\n\n  const onSubmit = e => {\n    if (!input) {\n      return null;\n    }\n    e.preventDefault();\n    setsearchParams(input !== '' ? { filter: input } : {});\n    setInput('');\n  };\n\n  const onChangeInput = value => {\n    setInput(value);\n\n    if (!movies) {\n      return null;\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          tupe=\"text\"\n          value={input}\n          name=\"input\"\n          onChange={e => onChangeInput(e.target.value.toLowerCase())}\n        />\n        <button tupe=\"submit\">Search</button>\n      </form>\n      {movies.map(({ poster_path, id, title }) => {\n        let poster;\n        if (poster_path) {\n          poster = `https://image.tmdb.org/t/p/w400${poster_path}`;\n        } else {\n          poster = defImg;\n        }\n        return (\n          <Link key={id} to={`${id}`} state={{ from: location }}>\n            <img src={poster} width=\"400\" alt={title} />\n            <h2>{title}</h2>\n          </Link>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","fetchTrendingApi","data","fetchSearchApi","query","fetchMovieDetails","id","fetchCast","fetchReview","useState","movies","setMovies","useSearchParams","searchParams","setsearchParams","input","setInput","inputParams","get","location","useLocation","useEffect","results","console","log","fetch","onSubmit","e","preventDefault","filter","tupe","value","name","onChange","onChangeInput","target","toLowerCase","map","poster","poster_path","title","defImg","Link","to","state","from","src","width","alt"],"sourceRoot":""}